{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","channel","readAPI","numPoints","fieldID","url","downloadURL","startDate","endDate","yaxismax","buildURL","console","log","setState","handleInputChange","event","target","name","value","style_input","display","paddingTop","textAlign","pointerEvents","className","Form","Group","controlId","style","Label","Control","type","defaultValue","this","required","onChange","Button","variant","onClick","width","height","id","href","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7e46c36.chunk.js","sourcesContent":["import './App.css';\nimport { Form, Button } from 'react-bootstrap';\nimport Iframe from 'react-iframe';\nimport React, { Component } from 'react';\n\nclass App extends Component {\n \n  state = {\n    channel: '',\n    readAPI: '',\n    numPoints: '',\n    fieldID: '',\n    url: '',\n    downloadURL: '',\n    startDate: '',\n    endDate: '',\n    yaxismax: '',\n  }\n\n\n\n  buildURL = () => {\n    let channel = this.state.channel;\n    let readAPI = this.state.readAPI;\n    let numPoints = this.state.numPoints;\n    let fieldID = this.state.fieldID;\n    let startDate = this.state.startDate;\n    let endDate = this.state.endDate;\n    let yaxismax = this.state.yaxismax;\n\n    let url = 'https://thingspeak.com/channels/' + channel + '/charts/' + fieldID + '?bgcolor=%23ffffff&color=%23d62020&dynamic=true&results=' + numPoints + '&type=line&api_key=' + readAPI;\n\n    //note that all fields get downloaded, not just one chart. Cool.\n    let downloadURL = 'https://api.thingspeak.com/channels/' + channel + '/feeds.csv?api_key=' + readAPI + '&results=' + numPoints;\n    \n    if (startDate && endDate) {\n      url = url + '&start=' + startDate + '%20' + '00:00:00' + '&end=' + endDate + '%20' + '00:00:00' + '&dynamic=false';\n      downloadURL = downloadURL + '&start=' + startDate + '%20' + '00:00:00' + '&end=' + endDate + '%20' + '00:00:00';\n    }\n\n    if (yaxismax) {\n      url = url + '&yaxismax=' + yaxismax;\n    }\n\n    console.log('The chart URL is:' + url);\n    this.setState({url: url});\n\n    console.log('the download URL is: ' + downloadURL);\n    this.setState({downloadURL: downloadURL});\n    // example <iframe width=\"450\" height=\"250\" style=\"border: 1px solid #cccccc;\" src=\"https://thingspeak.com/channels/CHANNEL_ID/charts/FIELD_ID?api_key=XXXXXXXXXXXXX\"></iframe>\n\n  }\n\n  handleInputChange = (event) => {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  \n  render () {\n    const style_input = {\n      display: 'block',\n      paddingTop: 0,\n      textAlign: 'left',\n      pointerEvents: 'auto',\n    };\n\n      return (\n      <div className=\"App\">\n        <Form>\n            <Form.Group controlId = \"channel\" style = {style_input} >\n                <Form.Label>Channel </Form.Label>\n                <Form.Control type = \"text\" \n                defaultValue = {this.state.channel}\n                name = \"channel\"\n                required\n                onChange = {this.handleInputChange}\n                />\n            </Form.Group>\n            <Form.Group controlId = \"readAPI\" style = {style_input}>\n                <Form.Label>readAPI </Form.Label>\n                <Form.Control type = \"text\" \n                defaultValue = {this.state.readAPI}\n                name = \"readAPI\"\n                required\n                onChange = {this.handleInputChange}\n                />\n            </Form.Group>\n            <Form.Group controlId = \"numPoints\" style = {style_input}>\n                <Form.Label># of points to chart </Form.Label>\n                <Form.Control type = \"text\" \n                defaultValue = {this.state.numPoints}\n                name = \"numPoints\"\n                required\n                onChange = {this.handleInputChange}\n                />\n            </Form.Group>\n            <Form.Group controlId = \"fieldID\" style = {style_input}>\n                <Form.Label>Field ID </Form.Label>\n                <Form.Control type = \"text\" \n                defaultValue = {this.state.fieldID}\n                name = \"fieldID\"\n                required\n                onChange = {this.handleInputChange}\n                />\n            <Form.Group controlId = \"startDate\" style = {style_input}>\n                <Form.Label>Data start date (YYYY-MM-DD) </Form.Label>\n                <Form.Control type = \"text\" \n                defaultValue = {this.state.startDate}\n                name = \"startDate\"\n                required\n                onChange = {this.handleInputChange}\n                />\n            </Form.Group>\n            <Form.Group controlId = \"endDate\" style = {style_input}>\n                <Form.Label>Data end date (YYYY-MM-DD) </Form.Label>\n                <Form.Control type = \"text\" \n                defaultValue = {this.state.endDate}\n                name = \"endDate\"\n                required\n                onChange = {this.handleInputChange}\n                />\n            </Form.Group>\n            <Form.Group controlId = \"yaxismax\" style = {style_input}>\n                <Form.Label>Y axis max </Form.Label>\n                <Form.Control type = \"text\" \n                defaultValue = {this.state.yaxismax}\n                name = \"yaxismax\"\n                required\n                onChange = {this.handleInputChange}\n                />\n            </Form.Group>\n                <br/>\n                \"Y axis max\" sets the magnitude of the y axis. This is helpful to chart data.\n                <br/>\n                Field ID numbers:\n                  <ol>\n                    <li>mass reading (g)</li>\n                    <li>mass reading with temperature noise minimized (g)</li>\n                    <li>temperature (deg C)</li>\n                    <li>battery voltage</li>\n                  </ol>\n                \n            </Form.Group>\n        </Form>\n\n        <Button variant = \"priamry\" onClick = {this.buildURL}>Chart</Button>\n        \n        <Iframe \n          url = {this.state.url}\n          width = \"450px\"\n          height = \"260px\"\n          id = \"chart\"\n        />\n\n        download URL:\n        <a href={this.state.downloadURL}>{this.state.downloadURL}</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}